#!/usr/bin/python -tt

# American Funds account balance scraper v1.2.1
# Copyright (c) 2007-9, 2011-12, John Morrissey <jwm@horde.net>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of Version 2 of the GNU General Public License as
# published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

USERNAME = ''
PASSWORD = ''
QUESTIONS = {
	'question': 'answer',
	'question': 'answer',
	'question': 'answer',
}
AF_TAB = '/var/cache/cricket/af.tab'

from getopt import gnu_getopt, GetoptError
from os.path import basename
import re
import sys
from urllib import urlencode
from urllib2 import Request

from BeautifulSoup import BeautifulSoup, BeautifulStoneSoup
import mechanize

def usage():
	print 'American Funds account balance scraper v1.2'
	print 'Usage: %s [-h|--help]'  % basename(sys.argv[0])
	print ''
	print '    -h, --help                    display this help and exit'

try:
	options = gnu_getopt(sys.argv[1:], 'h', ['help'])
except GetoptError, e:
	print basename(sys.argv[0]) + ': ' + str(e)
	usage()
	sys.exit(1)

for option in options[0]:
	if option[0] == '-h' or option[0] == '--help':
		usage()
		sys.exit(0)

if USERNAME == None or PASSWORD == None or QUESTIONS == None or AF_TAB == None:
	print 'You must edit %s to configure your username, password, security questions, and output filename.' % sys.argv[0]
	sys.exit(1)


auth = Request('https://www.americanfunds.com/account/login.external.html',
	urlencode((
		('action', 'login'),
		('loginId', USERNAME),
		('pm_fp', 'true'),
	))
)
auth.add_header('User-Agent', 'American Funds account balance scraper v1.2')
data = mechanize.urlopen(auth)
body = ''.join(data.fp.readlines())

if 'routine site maintenance' in body or \
   'experiencing technical difficulties' in body:
	print 'americanfunds.com is unavailable.'
	sys.exit(1)

# HTMLParser has trouble parsing some of the JavaScript bits:
#   HTMLParser.HTMLParseError: malformed start tag, at line 732, column 35
strip_script = re.compile(r'<script\s+.*?</script>', re.I + re.S)

soup = BeautifulSoup(strip_script.sub('', body))
question = soup.find('label', attrs={'for': 'challengeQuestion'})
if question:
	question = BeautifulStoneSoup(
		soup.find('label', attrs={'for': 'challengeQuestion'}).string,
		convertEntities=BeautifulStoneSoup.HTML_ENTITIES).contents[0]
	question_id = soup.find('input', attrs={'name': 'challengeQuestionId'})['value']

	auth = Request('https://www.americanfunds.com/account/login/challenge-question.external.html',
		urlencode((
			('challengeQuestionId', question_id),
			('challengeAnswer', QUESTIONS[question]),
		))
	)
	auth.add_header('User-Agent', 'American Funds account balance scraper v1.2')
	data = mechanize.urlopen(auth)

auth = Request('https://www.americanfunds.com/account/login/password.external.html',
	urlencode((
		('password', PASSWORD),
	))
)
auth.add_header('User-Agent', 'American Funds account balance scraper v1.2')
data = mechanize.urlopen(auth)
soup = BeautifulSoup(strip_script.sub('', ''.join(data.fp.readlines())))

out = open(AF_TAB, 'w')

summary = soup.find(attrs={'id': 'summary-total'})

non_retirement = summary.find(text=re.compile('^\s*Non-retirement accounts:?\s*$'))
while non_retirement.parent:
	non_retirement = non_retirement.parent
	balance = non_retirement.find(text=re.compile(r'^\$[\d,.]+$'))
	if balance:
		out.write('af-nonret %s\n' % balance.replace('$', '').replace(',', ''))
		break

retirement = summary.find(text=re.compile('^\s*Retirement accounts:?\s*$'))
while retirement.parent:
	retirement = retirement.parent
	balance = retirement.find(text=re.compile(r'^\$[\d,.]+$'))
	if balance:
		out.write('af-roth %s\n' % balance.replace('$', '').replace(',', ''))
		break

def funds(soup, num):
	module = soup.find(id='account-module-%d' % num)

	funds = module.findAll(
		'a', attrs={'href': re.compile(r'/funds/details')})
	if funds:
		return funds
	return []

def balance(fund):
	while fund.parent:
		fund = fund.parent
		balance = fund.findAll(text=re.compile(r'^\$[\d,.]+$'))
		if not balance:
			continue

		# The highest value is probably the balance,
		# the lowest probably the share price.
		balance = max([
			float(bal.replace('$', '').replace(',', ''))
			for bal
			 in balance
		])
		return balance

for fund in funds(soup, 0):
	name = fund.find(text=True)
	out.write('%s %s\n' % (
		name.lower().replace(' ', '_')[:9],
		balance(fund),
	))

for fund in funds(soup, 1):
	name = fund.find(text=True)
	out.write('%s-roth %s\n' % (
		name.lower().replace(' ', '_')[:9],
		balance(fund),
	))

out.close()
